openapi: "3.0.0"
info:
  version: 0.1.0
  title: dockyards-backend
  description: no
security:
- bearerAuth: []
paths:
  /v1/login:
    post:
      operationId: login
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: 'types.yaml#/components/schemas/login'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: 'types.yaml#/components/schemas/tokens'
        400: {}
        422:
          content:
            application/json:
              schema:
                $ref: 'types.yaml#/components/schemas/unprocessable_entity_errors'
  /v1/refresh:
    post:
      operationId: refresh
      security: []
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: 'types.yaml#/components/schemas/tokens'
        401: {}
        500: {}
  /v1/cluster-options:
    get:
      operationId: getClusterOptions
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: 'types.yaml#/components/schemas/options'
        500: {}
  /v1/clusters/{cluster_id}:
    get:
      operationId: getCluster
      parameters:
      - name: cluster_id
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: 'types.yaml#/components/schemas/cluster'
        401: {}
        500: {}
    delete:
      operationId: deleteCluster
      parameters:
      - name: cluster_id
        in: path
        required: true
        schema:
          type: string
      responses:
        202: {}
        401: {}
        500: {}
  /v1/orgs:
    get:
      operationId: getOrganizations
      responses:
        200:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: 'types.yaml#/components/schemas/organization'
    post:
      operationId: createOrganization
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: 'types.yaml#/components/schemas/organization_options'
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: 'types.yaml#/components/schemas/organization'
        401: {}
        422:
          content:
            application/json:
              schema:
                $ref: 'types.yaml#/components/schemas/unprocessable_entity_errors'
        500: {}
  /v1/orgs/{organization_name}:
    delete:
      operationId: deleteOrganization
      parameters:
      - name: organization_name
        required: true
        in: path
        schema:
          type: string
      responses:
        202: {}
        401: {}
        500: {}
  /v1/orgs/{organization_name}/clusters:
    post:
      operationId: createCluster
      parameters:
      - name: organization_name
        required: true
        in: path
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: 'types.yaml#/components/schemas/cluster_options'
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: 'types.yaml#/components/schemas/cluster'
        401: {}
        422:
          content:
            application/json:
              schema:
                $ref: 'types.yaml#/components/schemas/unprocessable_entity_errors'
        500: {}
    get:
      operationId: getOrganizationClusters
      parameters:
      - name: organization_name
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: 'types.yaml#/components/schemas/cluster'
        401: {}
        500: {}
  /v1/orgs/{organization_name}/ip-pools:
    get:
      operationId: getIpPools
      parameters:
      - name: organization_name
        required: true
        in: path
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: 'types.yaml#/components/schemas/ip_pool'
        401: {}
        500: {}
  /v1/orgs/{organization_name}/clusters/{cluster_name}/node-pools:
    get:
      operationId: listClusterNodePools
      parameters:
      - name: organization_name
        required: true
        in: path
        schema:
          type: string
      - name: cluster_name
        required: true
        in: path
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: 'types.yaml#/components/schemas/node_pool'
        400: {}
        401: {}
        500: {}
    post:
      operationId: createClusterNodePool
      parameters:
      - name: organization_name
        required: true
        in: path
        schema:
          type: string
      - name: cluster_name
        required: true
        in: path
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: 'types.yaml#/components/schemas/node_pool_options'
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: 'types.yaml#/components/schemas/node_pool'
        400: {}
        401: {}
        409: {}
        422:
          content:
            application/json:
              schema:
                $ref: 'types.yaml#/components/schemas/unprocessable_entity_errors'
        500: {}
  /v1/orgs/{organization_name}/clusters/{cluster_name}/node-pools/{node_pool_name}:
    get:
      operationId: getClusterNodePool
      parameters:
      - name: organization_name
        required: true
        in: path
        schema:
          type: string
      - name: cluster_name
        required: true
        in: path
        schema:
          type: string
      - name: node_pool_name
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: 'types.yaml#/components/schemas/node_pool'
        400: {}
        401: {}
        500: {}
    delete:
      operationId: deleteClusterNodePool
      parameters:
      - name: organization_name
        required: true
        in: path
        schema:
          type: string
      - name: cluster_name
        required: true
        in: path
        schema:
          type: string
      - name: node_pool_name
        in: path
        required: true
        schema:
          type: string
      responses:
        202: {}
        400: {}
        401: {}
        500: {}
    patch:
      operationId: updateClusterNodePool
      parameters:
      - name: organization_name
        required: true
        in: path
        schema:
          type: string
      - name: cluster_name
        required: true
        in: path
        schema:
          type: string
      - name: node_pool_name
        in: path
        required: true
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: 'types.yaml#/components/schemas/node_pool_options'
      responses:
        202: {}
        401: {}
        404: {}
        422: {}
        500: {}
  /v1/orgs/{organization_name}/clusters/{cluster_name}/workloads:
    post:
      operationId: createClusterWorkload
      parameters:
      - name: organization_name
        required: true
        in: path
        schema:
          type: string
      - name: cluster_name
        required: true
        in: path
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: 'types.yaml#/components/schemas/workload_options'
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: 'types.yaml#/components/schemas/workload'
        400: {}
        401: {}
        409: {}
        422:
          content:
            application/json:
              schema:
                $ref: 'types.yaml#/components/schemas/unprocessable_entity_errors'
        500: {}
    get:
      operationId: getClusterWorkloads
      parameters:
      - name: organization_name
        required: true
        in: path
        schema:
          type: string
      - name: cluster_name
        required: true
        in: path
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: 'types.yaml#/components/schemas/workload'
        400: {}
        401: {}
        404: {}
        500: {}
  /v1/orgs/{organization_name}/clusters/{cluster_name}/workloads/{workload_name}:
    delete:
      operationId: deleteClusterWorkload
      parameters:
      - name: organization_name
        required: true
        in: path
        schema:
          type: string
      - name: cluster_name
        required: true
        in: path
        schema:
          type: string
      - name: workload_name
        required: true
        in: path
        schema:
          type: string
      responses:
        202: {}
        400: {}
        401: {}
        404: {}
        500: {}
    put:
      operationId: updateClusterWorkload
      parameters:
      - name: organization_name
        required: true
        in: path
        schema:
          type: string
      - name: cluster_name
        required: true
        in: path
        schema:
          type: string
      - name: workload_name
        required: true
        in: path
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: 'types.yaml#/components/schemas/workload_options'
      responses:
        202: {}
        400: {}
        401: {}
        404: {}
        422:
          content:
            application/json:
              schema:
                $ref: 'types.yaml#/components/schemas/unprocessable_entity_errors'
        500: {}
    get:
      operationId: getClusterWorkload
      parameters:
      - name: organization_name
        required: true
        in: path
        schema:
          type: string
      - name: cluster_name
        required: true
        in: path
        schema:
          type: string
      - name: workload_name
        required: true
        in: path
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: 'types.yaml#/components/schemas/workload'
        400: {}
        401: {}
        404: {}
        500: {}
  /v1/clusters/{cluster_id}/kubeconfig:
    get:
      deprecated: true
      operationId: getKubeconfig
      parameters:
      - name: cluster_id
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                type: string
        401: {}
        500: {} 
  /v1/credentials:
    get:
      operationId: getCredentials
      responses:
        200:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: 'types.yaml#/components/schemas/credential'
        500: {}
  /v1/orgs/{organization_name}/credentials:
    post:
      operationId: createOrganizationCredential
      parameters:
      - name: organization_name
        in: path
        required: true
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: 'types.yaml#/components/schemas/credential'
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: 'types.yaml#/components/schemas/credential'
        401: {}
        500: {}
    get:
      operationId: getOrganizationCredentials
      parameters:
      - name: organization_name
        in: path
        required: true
        schema:
          type: string
      responses:
        201:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: 'types.yaml#/components/schemas/credential'
        401: {}
        500: {}
  /v1/orgs/{organization_name}/credentials/{credential_name}:
    delete:
      operationId: deleteOrganizationCredential
      parameters:
      - name: organization_name
        in: path
        required: true
        schema:
          type: string
      - name: credential_name
        in: path
        required: true
        schema:
          type: string
      responses:
        204: {}
        401: {}
        500: {}
    put:
      operationId: updateOrganizationCredential
      parameters:
      - name: organization_name
        in: path
        required: true
        schema:
          type: string
      - name: credential_name
        in: path
        required: true
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: 'types.yaml#/components/schemas/credential'
      responses:
        200: {}
        401: {}
        500: {}
    get:
      operationId: getOrganizationCredential
      parameters:
      - name: organization_name
        in: path
        required: true
        schema:
          type: string
      - name: credential_name
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: 'types.yaml#/components/schemas/credential'
        500: {}
  /v1/whoami:
    get:
      operationId: whoami
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: 'types.yaml#/components/schemas/user'
  /v1/clusters/{cluster_id}/node-pools:
    post:
      deprecated: true
      operationId: createNodePool
      parameters:
      - name: cluster_id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: 'types.yaml#/components/schemas/node_pool_options'
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: 'types.yaml#/components/schemas/node_pool'
        401: {}
        409: {}
        500: {}
  /v1/orgs/{organization_name}/clusters/{cluster_name}/kubeconfig:
    post:
      operationId: createClusterKubeconfig
      parameters:
      - name: organization_name
        in: path
        required: true
        schema:
          type: string
      - name: cluster_name
        in: path
        required: true
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: 'types.yaml#/components/schemas/kubeconfig_options'
      responses:
        201:
          content:
            application/yaml:
              schema:
                type: string
                format: binary
        401: {}
        409: {}
        500: {}
components:
  securitySchemas:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
