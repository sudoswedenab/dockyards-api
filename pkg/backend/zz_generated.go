//go:build go1.22

// Package backend provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package backend

import (
	"context"
	"fmt"
	"net/http"

	externalRef0 "bitbucket.org/sudosweden/dockyards-api/pkg/types"
	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// CreateDeploymentJSONRequestBody defines body for CreateDeployment for application/json ContentType.
type CreateDeploymentJSONRequestBody = externalRef0.Deployment

// CreateNodePoolJSONRequestBody defines body for CreateNodePool for application/json ContentType.
type CreateNodePoolJSONRequestBody = externalRef0.NodePoolOptions

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody = externalRef0.Login

// UpdateNodePoolJSONRequestBody defines body for UpdateNodePool for application/json ContentType.
type UpdateNodePoolJSONRequestBody = externalRef0.NodePoolOptions

// CreateClusterJSONRequestBody defines body for CreateCluster for application/json ContentType.
type CreateClusterJSONRequestBody = externalRef0.ClusterOptions

// CreateClusterWorkloadJSONRequestBody defines body for CreateClusterWorkload for application/json ContentType.
type CreateClusterWorkloadJSONRequestBody = externalRef0.Workload

// UpdateClusterWorkloadJSONRequestBody defines body for UpdateClusterWorkload for application/json ContentType.
type UpdateClusterWorkloadJSONRequestBody = externalRef0.Workload

// CreateOrganizationCredentialJSONRequestBody defines body for CreateOrganizationCredential for application/json ContentType.
type CreateOrganizationCredentialJSONRequestBody = externalRef0.Credential

// UpdateOrganizationCredentialJSONRequestBody defines body for UpdateOrganizationCredential for application/json ContentType.
type UpdateOrganizationCredentialJSONRequestBody = externalRef0.Credential

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /v1/cluster-options)
	GetClusterOptions(w http.ResponseWriter, r *http.Request)

	// (GET /v1/clusters)
	GetClusters(w http.ResponseWriter, r *http.Request)

	// (DELETE /v1/clusters/{cluster_id})
	DeleteCluster(w http.ResponseWriter, r *http.Request, clusterID string)

	// (GET /v1/clusters/{cluster_id})
	GetCluster(w http.ResponseWriter, r *http.Request, clusterID string)

	// (GET /v1/clusters/{cluster_id}/deployments)
	GetDeployments(w http.ResponseWriter, r *http.Request, clusterID string)

	// (POST /v1/clusters/{cluster_id}/deployments)
	CreateDeployment(w http.ResponseWriter, r *http.Request, clusterID string)

	// (GET /v1/clusters/{cluster_id}/kubeconfig)
	GetKubeconfig(w http.ResponseWriter, r *http.Request, clusterID string)

	// (POST /v1/clusters/{cluster_id}/node-pools)
	CreateNodePool(w http.ResponseWriter, r *http.Request, clusterID string)

	// (GET /v1/credentials)
	GetCredentials(w http.ResponseWriter, r *http.Request)

	// (DELETE /v1/deployments/{deployment_id})
	DeleteDeployment(w http.ResponseWriter, r *http.Request, deploymentID string)

	// (GET /v1/deployments/{deployment_id})
	GetDeployment(w http.ResponseWriter, r *http.Request, deploymentID string)

	// (POST /v1/login)
	Login(w http.ResponseWriter, r *http.Request)

	// (DELETE /v1/node-pools/{node_pool_id})
	DeleteNodePool(w http.ResponseWriter, r *http.Request, nodePoolID string)

	// (GET /v1/node-pools/{node_pool_id})
	GetNodePool(w http.ResponseWriter, r *http.Request, nodePoolID string)

	// (PATCH /v1/node-pools/{node_pool_id})
	UpdateNodePool(w http.ResponseWriter, r *http.Request, nodePoolID string)

	// (GET /v1/orgs)
	GetOrganizations(w http.ResponseWriter, r *http.Request)

	// (POST /v1/orgs/{organization_name}/clusters)
	CreateCluster(w http.ResponseWriter, r *http.Request, organizationName string)

	// (GET /v1/orgs/{organization_name}/clusters/{cluster_name}/workloads)
	GetClusterWorkloads(w http.ResponseWriter, r *http.Request, organizationName string, clusterName string)

	// (POST /v1/orgs/{organization_name}/clusters/{cluster_name}/workloads)
	CreateClusterWorkload(w http.ResponseWriter, r *http.Request, organizationName string, clusterName string)

	// (DELETE /v1/orgs/{organization_name}/clusters/{cluster_name}/workloads/{workload_name})
	DeleteClusterWorkload(w http.ResponseWriter, r *http.Request, organizationName string, clusterName string, workloadName string)

	// (GET /v1/orgs/{organization_name}/clusters/{cluster_name}/workloads/{workload_name})
	GetClusterWorkload(w http.ResponseWriter, r *http.Request, organizationName string, clusterName string, workloadName string)

	// (PUT /v1/orgs/{organization_name}/clusters/{cluster_name}/workloads/{workload_name})
	UpdateClusterWorkload(w http.ResponseWriter, r *http.Request, organizationName string, clusterName string, workloadName string)

	// (GET /v1/orgs/{organization_name}/credentials)
	GetOrganizationCredentials(w http.ResponseWriter, r *http.Request, organizationName string)

	// (POST /v1/orgs/{organization_name}/credentials)
	CreateOrganizationCredential(w http.ResponseWriter, r *http.Request, organizationName string)

	// (DELETE /v1/orgs/{organization_name}/credentials/{credential_name})
	DeleteOrganizationCredential(w http.ResponseWriter, r *http.Request, organizationName string, credentialName string)

	// (GET /v1/orgs/{organization_name}/credentials/{credential_name})
	GetOrganizationCredential(w http.ResponseWriter, r *http.Request, organizationName string, credentialName string)

	// (PUT /v1/orgs/{organization_name}/credentials/{credential_name})
	UpdateOrganizationCredential(w http.ResponseWriter, r *http.Request, organizationName string, credentialName string)

	// (GET /v1/orgs/{organization_name}/ip-pools)
	GetIPPools(w http.ResponseWriter, r *http.Request, organizationName string)

	// (GET /v1/overview)
	GetOverview(w http.ResponseWriter, r *http.Request)

	// (POST /v1/refresh)
	Refresh(w http.ResponseWriter, r *http.Request)

	// (GET /v1/whoami)
	Whoami(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetClusterOptions operation middleware
func (siw *ServerInterfaceWrapper) GetClusterOptions(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetClusterOptions(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetClusters operation middleware
func (siw *ServerInterfaceWrapper) GetClusters(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetClusters(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteCluster operation middleware
func (siw *ServerInterfaceWrapper) DeleteCluster(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "cluster_id" -------------
	var clusterID string

	err = runtime.BindStyledParameterWithOptions("simple", "cluster_id", r.PathValue("cluster_id"), &clusterID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cluster_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteCluster(w, r, clusterID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetCluster operation middleware
func (siw *ServerInterfaceWrapper) GetCluster(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "cluster_id" -------------
	var clusterID string

	err = runtime.BindStyledParameterWithOptions("simple", "cluster_id", r.PathValue("cluster_id"), &clusterID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cluster_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCluster(w, r, clusterID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetDeployments operation middleware
func (siw *ServerInterfaceWrapper) GetDeployments(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "cluster_id" -------------
	var clusterID string

	err = runtime.BindStyledParameterWithOptions("simple", "cluster_id", r.PathValue("cluster_id"), &clusterID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cluster_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDeployments(w, r, clusterID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateDeployment operation middleware
func (siw *ServerInterfaceWrapper) CreateDeployment(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "cluster_id" -------------
	var clusterID string

	err = runtime.BindStyledParameterWithOptions("simple", "cluster_id", r.PathValue("cluster_id"), &clusterID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cluster_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateDeployment(w, r, clusterID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetKubeconfig operation middleware
func (siw *ServerInterfaceWrapper) GetKubeconfig(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "cluster_id" -------------
	var clusterID string

	err = runtime.BindStyledParameterWithOptions("simple", "cluster_id", r.PathValue("cluster_id"), &clusterID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cluster_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetKubeconfig(w, r, clusterID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateNodePool operation middleware
func (siw *ServerInterfaceWrapper) CreateNodePool(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "cluster_id" -------------
	var clusterID string

	err = runtime.BindStyledParameterWithOptions("simple", "cluster_id", r.PathValue("cluster_id"), &clusterID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cluster_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateNodePool(w, r, clusterID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetCredentials operation middleware
func (siw *ServerInterfaceWrapper) GetCredentials(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCredentials(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteDeployment operation middleware
func (siw *ServerInterfaceWrapper) DeleteDeployment(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "deployment_id" -------------
	var deploymentID string

	err = runtime.BindStyledParameterWithOptions("simple", "deployment_id", r.PathValue("deployment_id"), &deploymentID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "deployment_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteDeployment(w, r, deploymentID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetDeployment operation middleware
func (siw *ServerInterfaceWrapper) GetDeployment(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "deployment_id" -------------
	var deploymentID string

	err = runtime.BindStyledParameterWithOptions("simple", "deployment_id", r.PathValue("deployment_id"), &deploymentID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "deployment_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDeployment(w, r, deploymentID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// Login operation middleware
func (siw *ServerInterfaceWrapper) Login(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Login(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteNodePool operation middleware
func (siw *ServerInterfaceWrapper) DeleteNodePool(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "node_pool_id" -------------
	var nodePoolID string

	err = runtime.BindStyledParameterWithOptions("simple", "node_pool_id", r.PathValue("node_pool_id"), &nodePoolID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "node_pool_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteNodePool(w, r, nodePoolID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetNodePool operation middleware
func (siw *ServerInterfaceWrapper) GetNodePool(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "node_pool_id" -------------
	var nodePoolID string

	err = runtime.BindStyledParameterWithOptions("simple", "node_pool_id", r.PathValue("node_pool_id"), &nodePoolID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "node_pool_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetNodePool(w, r, nodePoolID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateNodePool operation middleware
func (siw *ServerInterfaceWrapper) UpdateNodePool(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "node_pool_id" -------------
	var nodePoolID string

	err = runtime.BindStyledParameterWithOptions("simple", "node_pool_id", r.PathValue("node_pool_id"), &nodePoolID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "node_pool_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateNodePool(w, r, nodePoolID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetOrganizations operation middleware
func (siw *ServerInterfaceWrapper) GetOrganizations(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetOrganizations(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateCluster operation middleware
func (siw *ServerInterfaceWrapper) CreateCluster(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "organization_name" -------------
	var organizationName string

	err = runtime.BindStyledParameterWithOptions("simple", "organization_name", r.PathValue("organization_name"), &organizationName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "organization_name", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateCluster(w, r, organizationName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetClusterWorkloads operation middleware
func (siw *ServerInterfaceWrapper) GetClusterWorkloads(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "organization_name" -------------
	var organizationName string

	err = runtime.BindStyledParameterWithOptions("simple", "organization_name", r.PathValue("organization_name"), &organizationName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "organization_name", Err: err})
		return
	}

	// ------------- Path parameter "cluster_name" -------------
	var clusterName string

	err = runtime.BindStyledParameterWithOptions("simple", "cluster_name", r.PathValue("cluster_name"), &clusterName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cluster_name", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetClusterWorkloads(w, r, organizationName, clusterName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateClusterWorkload operation middleware
func (siw *ServerInterfaceWrapper) CreateClusterWorkload(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "organization_name" -------------
	var organizationName string

	err = runtime.BindStyledParameterWithOptions("simple", "organization_name", r.PathValue("organization_name"), &organizationName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "organization_name", Err: err})
		return
	}

	// ------------- Path parameter "cluster_name" -------------
	var clusterName string

	err = runtime.BindStyledParameterWithOptions("simple", "cluster_name", r.PathValue("cluster_name"), &clusterName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cluster_name", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateClusterWorkload(w, r, organizationName, clusterName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteClusterWorkload operation middleware
func (siw *ServerInterfaceWrapper) DeleteClusterWorkload(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "organization_name" -------------
	var organizationName string

	err = runtime.BindStyledParameterWithOptions("simple", "organization_name", r.PathValue("organization_name"), &organizationName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "organization_name", Err: err})
		return
	}

	// ------------- Path parameter "cluster_name" -------------
	var clusterName string

	err = runtime.BindStyledParameterWithOptions("simple", "cluster_name", r.PathValue("cluster_name"), &clusterName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cluster_name", Err: err})
		return
	}

	// ------------- Path parameter "workload_name" -------------
	var workloadName string

	err = runtime.BindStyledParameterWithOptions("simple", "workload_name", r.PathValue("workload_name"), &workloadName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "workload_name", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteClusterWorkload(w, r, organizationName, clusterName, workloadName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetClusterWorkload operation middleware
func (siw *ServerInterfaceWrapper) GetClusterWorkload(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "organization_name" -------------
	var organizationName string

	err = runtime.BindStyledParameterWithOptions("simple", "organization_name", r.PathValue("organization_name"), &organizationName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "organization_name", Err: err})
		return
	}

	// ------------- Path parameter "cluster_name" -------------
	var clusterName string

	err = runtime.BindStyledParameterWithOptions("simple", "cluster_name", r.PathValue("cluster_name"), &clusterName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cluster_name", Err: err})
		return
	}

	// ------------- Path parameter "workload_name" -------------
	var workloadName string

	err = runtime.BindStyledParameterWithOptions("simple", "workload_name", r.PathValue("workload_name"), &workloadName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "workload_name", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetClusterWorkload(w, r, organizationName, clusterName, workloadName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateClusterWorkload operation middleware
func (siw *ServerInterfaceWrapper) UpdateClusterWorkload(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "organization_name" -------------
	var organizationName string

	err = runtime.BindStyledParameterWithOptions("simple", "organization_name", r.PathValue("organization_name"), &organizationName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "organization_name", Err: err})
		return
	}

	// ------------- Path parameter "cluster_name" -------------
	var clusterName string

	err = runtime.BindStyledParameterWithOptions("simple", "cluster_name", r.PathValue("cluster_name"), &clusterName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cluster_name", Err: err})
		return
	}

	// ------------- Path parameter "workload_name" -------------
	var workloadName string

	err = runtime.BindStyledParameterWithOptions("simple", "workload_name", r.PathValue("workload_name"), &workloadName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "workload_name", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateClusterWorkload(w, r, organizationName, clusterName, workloadName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetOrganizationCredentials operation middleware
func (siw *ServerInterfaceWrapper) GetOrganizationCredentials(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "organization_name" -------------
	var organizationName string

	err = runtime.BindStyledParameterWithOptions("simple", "organization_name", r.PathValue("organization_name"), &organizationName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "organization_name", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetOrganizationCredentials(w, r, organizationName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateOrganizationCredential operation middleware
func (siw *ServerInterfaceWrapper) CreateOrganizationCredential(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "organization_name" -------------
	var organizationName string

	err = runtime.BindStyledParameterWithOptions("simple", "organization_name", r.PathValue("organization_name"), &organizationName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "organization_name", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateOrganizationCredential(w, r, organizationName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteOrganizationCredential operation middleware
func (siw *ServerInterfaceWrapper) DeleteOrganizationCredential(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "organization_name" -------------
	var organizationName string

	err = runtime.BindStyledParameterWithOptions("simple", "organization_name", r.PathValue("organization_name"), &organizationName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "organization_name", Err: err})
		return
	}

	// ------------- Path parameter "credential_name" -------------
	var credentialName string

	err = runtime.BindStyledParameterWithOptions("simple", "credential_name", r.PathValue("credential_name"), &credentialName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "credential_name", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteOrganizationCredential(w, r, organizationName, credentialName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetOrganizationCredential operation middleware
func (siw *ServerInterfaceWrapper) GetOrganizationCredential(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "organization_name" -------------
	var organizationName string

	err = runtime.BindStyledParameterWithOptions("simple", "organization_name", r.PathValue("organization_name"), &organizationName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "organization_name", Err: err})
		return
	}

	// ------------- Path parameter "credential_name" -------------
	var credentialName string

	err = runtime.BindStyledParameterWithOptions("simple", "credential_name", r.PathValue("credential_name"), &credentialName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "credential_name", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetOrganizationCredential(w, r, organizationName, credentialName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateOrganizationCredential operation middleware
func (siw *ServerInterfaceWrapper) UpdateOrganizationCredential(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "organization_name" -------------
	var organizationName string

	err = runtime.BindStyledParameterWithOptions("simple", "organization_name", r.PathValue("organization_name"), &organizationName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "organization_name", Err: err})
		return
	}

	// ------------- Path parameter "credential_name" -------------
	var credentialName string

	err = runtime.BindStyledParameterWithOptions("simple", "credential_name", r.PathValue("credential_name"), &credentialName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "credential_name", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateOrganizationCredential(w, r, organizationName, credentialName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetIPPools operation middleware
func (siw *ServerInterfaceWrapper) GetIPPools(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "organization_name" -------------
	var organizationName string

	err = runtime.BindStyledParameterWithOptions("simple", "organization_name", r.PathValue("organization_name"), &organizationName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "organization_name", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetIPPools(w, r, organizationName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetOverview operation middleware
func (siw *ServerInterfaceWrapper) GetOverview(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetOverview(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// Refresh operation middleware
func (siw *ServerInterfaceWrapper) Refresh(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Refresh(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// Whoami operation middleware
func (siw *ServerInterfaceWrapper) Whoami(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Whoami(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       *http.ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m *http.ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m *http.ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/v1/cluster-options", wrapper.GetClusterOptions)
	m.HandleFunc("GET "+options.BaseURL+"/v1/clusters", wrapper.GetClusters)
	m.HandleFunc("DELETE "+options.BaseURL+"/v1/clusters/{cluster_id}", wrapper.DeleteCluster)
	m.HandleFunc("GET "+options.BaseURL+"/v1/clusters/{cluster_id}", wrapper.GetCluster)
	m.HandleFunc("GET "+options.BaseURL+"/v1/clusters/{cluster_id}/deployments", wrapper.GetDeployments)
	m.HandleFunc("POST "+options.BaseURL+"/v1/clusters/{cluster_id}/deployments", wrapper.CreateDeployment)
	m.HandleFunc("GET "+options.BaseURL+"/v1/clusters/{cluster_id}/kubeconfig", wrapper.GetKubeconfig)
	m.HandleFunc("POST "+options.BaseURL+"/v1/clusters/{cluster_id}/node-pools", wrapper.CreateNodePool)
	m.HandleFunc("GET "+options.BaseURL+"/v1/credentials", wrapper.GetCredentials)
	m.HandleFunc("DELETE "+options.BaseURL+"/v1/deployments/{deployment_id}", wrapper.DeleteDeployment)
	m.HandleFunc("GET "+options.BaseURL+"/v1/deployments/{deployment_id}", wrapper.GetDeployment)
	m.HandleFunc("POST "+options.BaseURL+"/v1/login", wrapper.Login)
	m.HandleFunc("DELETE "+options.BaseURL+"/v1/node-pools/{node_pool_id}", wrapper.DeleteNodePool)
	m.HandleFunc("GET "+options.BaseURL+"/v1/node-pools/{node_pool_id}", wrapper.GetNodePool)
	m.HandleFunc("PATCH "+options.BaseURL+"/v1/node-pools/{node_pool_id}", wrapper.UpdateNodePool)
	m.HandleFunc("GET "+options.BaseURL+"/v1/orgs", wrapper.GetOrganizations)
	m.HandleFunc("POST "+options.BaseURL+"/v1/orgs/{organization_name}/clusters", wrapper.CreateCluster)
	m.HandleFunc("GET "+options.BaseURL+"/v1/orgs/{organization_name}/clusters/{cluster_name}/workloads", wrapper.GetClusterWorkloads)
	m.HandleFunc("POST "+options.BaseURL+"/v1/orgs/{organization_name}/clusters/{cluster_name}/workloads", wrapper.CreateClusterWorkload)
	m.HandleFunc("DELETE "+options.BaseURL+"/v1/orgs/{organization_name}/clusters/{cluster_name}/workloads/{workload_name}", wrapper.DeleteClusterWorkload)
	m.HandleFunc("GET "+options.BaseURL+"/v1/orgs/{organization_name}/clusters/{cluster_name}/workloads/{workload_name}", wrapper.GetClusterWorkload)
	m.HandleFunc("PUT "+options.BaseURL+"/v1/orgs/{organization_name}/clusters/{cluster_name}/workloads/{workload_name}", wrapper.UpdateClusterWorkload)
	m.HandleFunc("GET "+options.BaseURL+"/v1/orgs/{organization_name}/credentials", wrapper.GetOrganizationCredentials)
	m.HandleFunc("POST "+options.BaseURL+"/v1/orgs/{organization_name}/credentials", wrapper.CreateOrganizationCredential)
	m.HandleFunc("DELETE "+options.BaseURL+"/v1/orgs/{organization_name}/credentials/{credential_name}", wrapper.DeleteOrganizationCredential)
	m.HandleFunc("GET "+options.BaseURL+"/v1/orgs/{organization_name}/credentials/{credential_name}", wrapper.GetOrganizationCredential)
	m.HandleFunc("PUT "+options.BaseURL+"/v1/orgs/{organization_name}/credentials/{credential_name}", wrapper.UpdateOrganizationCredential)
	m.HandleFunc("GET "+options.BaseURL+"/v1/orgs/{organization_name}/ip-pools", wrapper.GetIPPools)
	m.HandleFunc("GET "+options.BaseURL+"/v1/overview", wrapper.GetOverview)
	m.HandleFunc("POST "+options.BaseURL+"/v1/refresh", wrapper.Refresh)
	m.HandleFunc("GET "+options.BaseURL+"/v1/whoami", wrapper.Whoami)

	return m
}
