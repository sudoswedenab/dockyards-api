// Package types provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package types

import (
	"time"
)

// Cluster defines model for cluster.
type Cluster struct {
	AllocateInternalIP *bool       `json:"allocate_internal_ip,omitempty"`
	Condition          *string     `json:"condition,omitempty"`
	CreatedAt          time.Time   `json:"created_at"`
	DeletedAt          *time.Time  `json:"deleted_at,omitempty"`
	DNSZones           *[]string   `json:"dns_zones,omitempty"`
	Duration           *string     `json:"duration,omitempty"`
	ID                 string      `json:"id"`
	Name               string      `json:"name"`
	NodeCount          *int        `json:"node_count,omitempty"`
	NodePools          *[]NodePool `json:"node_pools,omitempty"`
	Organization       string      `json:"organization"`
	State              *string     `json:"state,omitempty"`
	UpdatedAt          *time.Time  `json:"updated_at,omitempty"`
	Version            string      `json:"version"`
}

// ClusterOptions defines model for cluster_options.
type ClusterOptions struct {
	AllocateInternalIP *bool              `json:"allocate_internal_ip,omitempty"`
	ClusterTemplate    *string            `json:"cluster_template,omitempty"`
	Duration           *string            `json:"duration,omitempty"`
	IngressProvider    *string            `json:"ingress_provider,omitempty"`
	Name               string             `json:"name"`
	NoClusterApps      *bool              `json:"no_cluster_apps,omitempty"`
	NoIngressProvider  *bool              `json:"no_ingress_provider,omitempty"`
	NodePoolOptions    *[]NodePoolOptions `json:"node_pool_options,omitempty"`
	Version            *string            `json:"version,omitempty"`
}

// Credential defines model for credential.
type Credential struct {
	CredentialTemplate *string            `json:"credential_template,omitempty"`
	Data               *map[string][]byte `json:"data,omitempty"`
	ID                 string             `json:"id"`
	Name               string             `json:"name"`
	Organization       string             `json:"organization"`
}

// IdentityProvider defines model for identity_provider.
type IdentityProvider struct {
	DisplayName *string `json:"display_name,omitempty"`
	ID          string  `json:"id"`
	Name        string  `json:"name"`
}

// IPPool defines model for ip_pool.
type IPPool struct {
	Addresses *[]string `json:"addresses,omitempty"`
	ID        *string   `json:"id,omitempty"`
	Name      *string   `json:"name,omitempty"`
}

// KubeconfigOptions defines model for kubeconfig_options.
type KubeconfigOptions struct {
	Duration *string `json:"duration,omitempty"`
}

// Login defines model for login.
type Login struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

// Node defines model for node.
type Node struct {
	ID    string `json:"id"`
	Name  string `json:"name"`
	State string `json:"state"`
}

// NodePool defines model for node_pool.
type NodePool struct {
	ClusterID                  *string            `json:"cluster_id,omitempty"`
	ControlPlane               *bool              `json:"control_plane,omitempty"`
	ControlPlaneComponentsOnly *bool              `json:"control_plane_components_only,omitempty"`
	CPUCount                   *int               `json:"cpu_count,omitempty"`
	CreatedAt                  *time.Time         `json:"created_at,omitempty"`
	DeletedAt                  *time.Time         `json:"deleted_at,omitempty"`
	DiskSize                   *string            `json:"disk_size,omitempty"`
	ID                         string             `json:"id"`
	LoadBalancer               *bool              `json:"load_balancer,omitempty"`
	Name                       string             `json:"name"`
	Nodes                      *[]Node            `json:"nodes,omitempty"`
	Quantity                   *int               `json:"quantity,omitempty"`
	RAMSize                    *string            `json:"ram_size,omitempty"`
	StorageResources           *[]StorageResource `json:"storage_resources,omitempty"`
	UpdatedAt                  *time.Time         `json:"updated_at,omitempty"`
}

// NodePoolOptions defines model for node_pool_options.
type NodePoolOptions struct {
	ControlPlane               *bool              `json:"control_plane,omitempty"`
	ControlPlaneComponentsOnly *bool              `json:"control_plane_components_only,omitempty"`
	CPUCount                   *int               `json:"cpu_count,omitempty"`
	DiskSize                   *string            `json:"disk_size,omitempty"`
	LoadBalancer               *bool              `json:"load_balancer,omitempty"`
	Name                       *string            `json:"name,omitempty"`
	Quantity                   *int               `json:"quantity,omitempty"`
	RAMSize                    *string            `json:"ram_size,omitempty"`
	StorageResources           *[]StorageResource `json:"storage_resources,omitempty"`
}

// Options defines model for options.
type Options struct {
	StorageResourceTypes *[]string `json:"storage_resource_types,omitempty"`
	Version              []string  `json:"version"`
}

// Organization defines model for organization.
type Organization struct {
	Condition   *string    `json:"condition,omitempty"`
	CreatedAt   time.Time  `json:"created_at"`
	DeletedAt   *time.Time `json:"deleted_at,omitempty"`
	DisplayName *string    `json:"display_name,omitempty"`
	Duration    *string    `json:"duration,omitempty"`
	ID          string     `json:"id"`
	Name        string     `json:"name"`
	UpdatedAt   *time.Time `json:"updated_at,omitempty"`
	VoucherCode *string    `json:"voucher_code,omitempty"`
}

// OrganizationOptions defines model for organization_options.
type OrganizationOptions struct {
	DisplayName *string `json:"display_name,omitempty"`
	Duration    *string `json:"duration,omitempty"`
	VoucherCode *string `json:"voucher_code,omitempty"`
}

// StorageResource defines model for storage_resource.
type StorageResource struct {
	Name     string  `json:"name"`
	Quantity string  `json:"quantity"`
	Type     *string `json:"type,omitempty"`
}

// Tokens defines model for tokens.
type Tokens struct {
	AccessToken  string `json:"AccessToken"`
	RefreshToken string `json:"RefreshToken"`
}

// UnprocessableEntityErrors defines model for unprocessable_entity_errors.
type UnprocessableEntityErrors struct {
	Errors []string `json:"errors"`
}

// User defines model for user.
type User struct {
	CreatedAt   *time.Time `json:"created_at,omitempty"`
	DisplayName *string    `json:"display_name,omitempty"`
	Email       string     `json:"email"`
	ID          string     `json:"id"`
	Name        string     `json:"name"`
	Password    *string    `json:"password,omitempty"`
	ProviderID  *string    `json:"provider_id,omitempty"`
	UpdatedAt   *time.Time `json:"updated_at,omitempty"`
}

// UserOptions defines model for user_options.
type UserOptions struct {
	DisplayName *string `json:"display_name,omitempty"`
	Email       string  `json:"email"`
	Password    string  `json:"password"`
}

// Workload defines model for workload.
type Workload struct {
	Condition            *string                 `json:"condition,omitempty"`
	CreatedAt            time.Time               `json:"created_at"`
	DeletedAt            *time.Time              `json:"deleted_at,omitempty"`
	ID                   string                  `json:"id"`
	Input                *map[string]interface{} `json:"input,omitempty"`
	Name                 string                  `json:"name"`
	Namespace            *string                 `json:"namespace,omitempty"`
	Provenience          *string                 `json:"provenience,omitempty"`
	UpdatedAt            *time.Time              `json:"updated_at,omitempty"`
	WorkloadTemplateName *string                 `json:"workload_template_name,omitempty"`
}

// WorkloadOptions defines model for workload_options.
type WorkloadOptions struct {
	Input                *map[string]interface{} `json:"input,omitempty"`
	Name                 *string                 `json:"name,omitempty"`
	Namespace            *string                 `json:"namespace,omitempty"`
	WorkloadTemplateName *string                 `json:"workload_template_name,omitempty"`
}
