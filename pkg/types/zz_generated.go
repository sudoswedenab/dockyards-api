// Package types provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package types

import (
	"time"
)

// App defines model for app.
type App struct {
	AppSteps    *[]AppStep `json:"app_steps,omitempty"`
	Description *string    `json:"description,omitempty"`
	Icon        *string    `json:"icon,omitempty"`
	ID          string     `json:"id"`
	Name        string     `json:"name"`
}

// AppStep defines model for app_step.
type AppStep struct {
	Name        string        `json:"name"`
	StepOptions *[]StepOption `json:"step_options,omitempty"`
}

// Cluster defines model for cluster.
type Cluster struct {
	AllocateInternalIP *bool      `json:"allocate_internal_ip,omitempty"`
	CreatedAt          time.Time  `json:"created_at"`
	Duration           *string    `json:"duration,omitempty"`
	ID                 string     `json:"id"`
	Name               string     `json:"name"`
	NodeCount          int        `json:"node_count"`
	NodePools          []NodePool `json:"node_pools"`
	Organization       string     `json:"organization"`
	State              string     `json:"state"`
	Version            string     `json:"version"`
}

// ClusterOptions defines model for cluster_options.
type ClusterOptions struct {
	AllocateInternalIP *bool              `json:"allocate_internal_ip,omitempty"`
	ClusterTemplate    *string            `json:"cluster_template,omitempty"`
	Duration           *string            `json:"duration,omitempty"`
	IngressProvider    *string            `json:"ingress_provider,omitempty"`
	Name               string             `json:"name"`
	NoClusterApps      *bool              `json:"no_cluster_apps,omitempty"`
	NoIngressProvider  *bool              `json:"no_ingress_provider,omitempty"`
	NodePoolOptions    *[]NodePoolOptions `json:"node_pool_options,omitempty"`
	Version            *string            `json:"version,omitempty"`
}

// ClusterOverview defines model for cluster_overview.
type ClusterOverview struct {
	Deployments *[]DeploymentOverview `json:"deployments,omitempty"`
	ID          string                `json:"id"`
	Name        string                `json:"name"`
}

// Credential defines model for credential.
type Credential struct {
	CredentialTemplate *string            `json:"credential_template,omitempty"`
	Data               *map[string][]byte `json:"data,omitempty"`
	ID                 string             `json:"id"`
	Name               string             `json:"name"`
	Organization       string             `json:"organization"`
}

// DeploymentOverview defines model for deployment_overview.
type DeploymentOverview struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

// IPPool defines model for ip_pool.
type IPPool struct {
	Addresses *[]string `json:"addresses,omitempty"`
	ID        *string   `json:"id,omitempty"`
	Name      *string   `json:"name,omitempty"`
}

// Login defines model for login.
type Login struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

// Node defines model for node.
type Node struct {
	ID    string `json:"id"`
	Name  string `json:"name"`
	State string `json:"state"`
}

// NodePool defines model for node_pool.
type NodePool struct {
	ClusterID                  string             `json:"cluster_id"`
	ControlPlane               *bool              `json:"control_plane,omitempty"`
	ControlPlaneComponentsOnly *bool              `json:"control_plane_components_only,omitempty"`
	CPUCount                   int                `json:"cpu_count"`
	DiskSize                   string             `json:"disk_size"`
	ID                         string             `json:"id"`
	LoadBalancer               *bool              `json:"load_balancer,omitempty"`
	Name                       string             `json:"name"`
	Nodes                      []Node             `json:"nodes"`
	Quantity                   int                `json:"quantity"`
	RAMSize                    string             `json:"ram_size"`
	StorageResources           *[]StorageResource `json:"storage_resources,omitempty"`
}

// NodePoolOptions defines model for node_pool_options.
type NodePoolOptions struct {
	ControlPlane               *bool              `json:"control_plane,omitempty"`
	ControlPlaneComponentsOnly *bool              `json:"control_plane_components_only,omitempty"`
	CPUCount                   *int               `json:"cpu_count,omitempty"`
	DiskSize                   *string            `json:"disk_size,omitempty"`
	LoadBalancer               *bool              `json:"load_balancer,omitempty"`
	Name                       *string            `json:"name,omitempty"`
	Quantity                   *int               `json:"quantity,omitempty"`
	RAMSize                    *string            `json:"ram_size,omitempty"`
	StorageResources           *[]StorageResource `json:"storage_resources,omitempty"`
}

// Options defines model for options.
type Options struct {
	StorageResourceTypes *[]string `json:"storage_resource_types,omitempty"`
	Version              []string  `json:"version"`
}

// Organization defines model for organization.
type Organization struct {
	CreatedAt   time.Time `json:"created_at"`
	DisplayName *string   `json:"display_name,omitempty"`
	Duration    *string   `json:"duration,omitempty"`
	ID          string    `json:"id"`
	Name        string    `json:"name"`
	UpdatedAt   time.Time `json:"updated_at"`
}

// OrganizationOverview defines model for organization_overview.
type OrganizationOverview struct {
	Clusters *[]ClusterOverview `json:"clusters,omitempty"`
	ID       string             `json:"id"`
	Name     string             `json:"name"`
	Users    *[]UserOverview    `json:"users,omitempty"`
}

// Overview defines model for overview.
type Overview struct {
	Organizations []OrganizationOverview `json:"organizations"`
}

// StepOption defines model for step_option.
type StepOption struct {
	Default     *string   `json:"default,omitempty"`
	DisplayName *string   `json:"display_name,omitempty"`
	Hidden      *bool     `json:"hidden,omitempty"`
	JSONPointer *string   `json:"json_pointer,omitempty"`
	Managed     *bool     `json:"managed,omitempty"`
	Selection   *[]string `json:"selection,omitempty"`
	Tags        *[]string `json:"tags,omitempty"`
	Toggle      *[]string `json:"toggle,omitempty"`
	Type        *string   `json:"type,omitempty"`
}

// StorageResource defines model for storage_resource.
type StorageResource struct {
	Name     string  `json:"name"`
	Quantity string  `json:"quantity"`
	Type     *string `json:"type,omitempty"`
}

// Tokens defines model for tokens.
type Tokens struct {
	AccessToken  string `json:"AccessToken"`
	RefreshToken string `json:"RefreshToken"`
}

// UnprocessableEntityErrors defines model for unprocessable_entity_errors.
type UnprocessableEntityErrors struct {
	Errors []string `json:"errors"`
}

// User defines model for user.
type User struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`
	Email     string     `json:"email"`
	ID        string     `json:"id"`
	Name      string     `json:"name"`
	Password  *string    `json:"password,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// UserOverview defines model for user_overview.
type UserOverview struct {
	Email string `json:"email"`
	ID    string `json:"id"`
}

// Workload defines model for workload.
type Workload struct {
	ID                   *string                 `json:"id,omitempty"`
	Input                *map[string]interface{} `json:"input,omitempty"`
	Name                 *string                 `json:"name,omitempty"`
	Namespace            *string                 `json:"namespace,omitempty"`
	Provenience          *string                 `json:"provenience,omitempty"`
	WorkloadTemplateName *string                 `json:"workload_template_name,omitempty"`
}
